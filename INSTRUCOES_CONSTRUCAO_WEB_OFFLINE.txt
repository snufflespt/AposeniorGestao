= INSTRUÇÕES PARA CONSTRUÇÃO DA APLICAÇÃO WEB OFFLINE =
= Replica exata do sistema Streamlit como página web HTML/CSS/JS =

=============================================
VISÃO GERAL
=============================================

Esta aplicação web offline replica a gestão de uma instituição de ensino (IPSS) que foi originalmente construída em Streamlit.
Mantém exatamente o mesmo design visual, funcionalidades e estrutura, mas usando tecnologias web puras:

- HTML para estrutura
- CSS para styling (replicando exatamente o design atual)
- JavaScript para funcionalidade
- LocalStorage/IndexedDB para armazenamento offline

=============================================
ESTRUTURA DE ARQUIVOS FINAL
=============================================

gestao-ipss-offline/
├── index.html              # Página principal
├── styles.css              # Todos os estilos (replicação do CSS atual)
├── script.js               # Lógica principal da aplicação
├── data/
│   ├── models.js           # Definição de estruturas de dados
│   └── storage.js          # Gerenciamento do armazenamento local
├── modules/
│   ├── navigation.js       # Sistema de navegação lateral
│   ├── dashboard.js        # Módulo do dashboard
│   ├── utentes.js          # Gestão de utentes
│   ├── professores.js      # Gestão de professores
│   ├── turmas.js           # Gestão de turmas
│   ├── disciplinas.js      # Gestão de disciplinas
│   └── horarios.js         # Gestão de horários
└── assets/
    ├── images/             # Logos e imagens
    └── fonts/              # Fonte Montserrat

=============================================
MÓDULO 1: CONFIGURAÇÃO BÁSICA E ESTRUTURA HTML
=============================================

INSTRUÇÃO: Crie a estrutura base da aplicação.

1. CRIE A PASTA PRINCIPAL:
   mkdir gestao-ipss-offline
   cd gestao-ipss-offline

2. CRIE O ARQUIVO index.html:

<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestão IPSS - Sistema Offline</title>

    <!-- Importe a fonte Montserrat exatamente como no Streamlit -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">

    <!-- Se preferir fonte offline, baixe Montserrat e importe:
    <link href="assets/fonts/montserrat.css" rel="stylesheet">
    -->

    <link href="styles.css" rel="stylesheet">
</head>
<body>
    <!-- Estrutura principal idêntica à do Streamlit -->
    <div class="sidebar">
        <div class="sidebar-header">
            <img src="assets/images/logo.png" alt="Logo IPSS" class="logo">
            <span class="sidebar-title">Gestão IPSS</span>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li><a href="#" data-page="inicio" class="nav-link active">🏠 Início</a></li>
                <li><a href="#" data-page="disciplinas" class="nav-link">📚 Disciplinas</a></li>
                <li><a href="#" data-page="utentes" class="nav-link">👥 Utentes</a></li>
                <li><a href="#" data-page="turmas" class="nav-link">🏫 Turmas</a></li>
                <li><a href="#" data-page="horarios" class="nav-link">📅 Horários</a></li>
                <li><a href="#" data-page="professores" class="nav-link">👨‍🏫 Professores</a></li>
            </ul>
        </nav>
    </div>

    <div class="main-content">
        <!-- Área dinâmica onde o conteúdo será carregado -->
        <div id="page-content"></div>
    </div>

    <script src="script.js"></script>
</body>
</html>

3. CRIE styles.css COM TODOS OS ESTILOS DO STREAMLIT:

:root {
    /* Variáveis de cores idênticas às do Streamlit */
    --color-bg-start: #34495e;
    --color-bg-end: #2c3e50;
    --color-text: #FFFFFF;
    --color-brand-start: #3498db;
    --color-brand-end: #2980b9;
    --font-family: 'Montserrat', sans-serif;
    --radius: 12px;
    --shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
}

/* Fundo idêntico ao do Streamlit */
body {
    margin: 0;
    padding: 0;
    background: radial-gradient(circle, var(--color-bg-start) 0%, var(--color-bg-end) 100%) !important;
    background-attachment: fixed;
    font-family: var(--font-family);
    color: var(--color-text);
    min-height: 100vh;
}

/* Layout lateral idêntico */
.sidebar {
    position: fixed;
    left: 0;
    top: 0;
    width: 280px;
    height: 100vh;
    background: linear-gradient(180deg, var(--color-bg-start), var(--color-bg-end)) !important;
    box-shadow: 6px 0 20px rgba(0, 0, 0, 0.25);
    z-index: 100;
}

.sidebar-header {
    text-align: center;
    padding: 20px;
    border-bottom: 1px solid #546e7a;
}

.logo {
    max-width: 60px;
    margin-bottom: 10px;
}

.sidebar-title {
    font-size: 1.2em;
    font-weight: 700;
    color: white;
}

.sidebar-nav ul {
    list-style: none;
    padding: 20px 0;
    margin: 0;
}

.nav-link {
    display: block;
    padding: 14px 18px;
    margin: 6px 8px;
    color: var(--color-text);
    text-decoration: none;
    border-radius: var(--radius);
    border-left: 4px solid transparent;
    font-weight: 500;
    transition: all 0.3s ease;
}

.nav-link:hover {
    background: rgba(255, 255, 255, 0.08);
    transform: translateX(4px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.nav-link.active {
    background: linear-gradient(135deg, var(--color-brand-start), var(--color-brand-end));
    border-left-color: white;
}

/* Área principal */
.main-content {
    margin-left: 280px;
    padding: 20px;
    min-height: 100vh;
}

.page-title {
    font-size: 2em;
    font-weight: 600;
    margin-bottom: 20px;
    color: white;
}

.metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.metric-card {
    background: linear-gradient(135deg, var(--color-brand-start), var(--color-brand-end));
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: 0 8px 24px rgba(52, 73, 94, 0.4);
    text-align: left;
    color: white;
    border: 1px solid #546e7a;
}

.metric-label {
    font-size: 0.9em;
    font-weight: 600;
    margin-bottom: 0.5rem;
    opacity: 0.9;
}

.metric-value {
    font-size: 2em;
    font-weight: 700;
    display: block;
}

.expandable-section {
    background: linear-gradient(135deg, #74b9ff 0%, #3498db 100%);
    border-radius: var(--radius);
    padding: 20px;
    margin: 20px 0;
    border: 1px solid #546e7a;
    box-shadow: 0 6px 24px rgba(52, 73, 94, 0.3);
}

/* Responsividade */
@media (max-width: 768px) {
    .sidebar {
        transform: translateX(-100%);
    }

    .main-content {
        margin-left: 0;
    }
}

4. CRIE script.js BÁSICO:

// Sistema de navegação
document.addEventListener('DOMContentLoaded', function() {
    // Carrega dados do LocalStorage
    initializeStorage();

    // Configura navegação
    setupNavigation();

    // Carrega dashboard inicial
    loadDashboard();
});

function setupNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');

    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();

            // Remove active de todos os links
            navLinks.forEach(l => l.classList.remove('active'));

            // Adiciona active ao link clicado
            this.classList.add('active');

            // Carrega a página correspondente
            const pageName = this.getAttribute('data-page');
            loadPage(pageName);
        });
    });
}

function loadPage(pageName) {
    const content = document.getElementById('page-content');

    switch(pageName) {
        case 'inicio':
            loadDashboard();
            break;
        case 'disciplinas':
            loadDisciplinas();
            break;
        case 'utentes':
            loadUtentes();
            break;
        case 'turmas':
            loadTurmas();
            break;
        case 'horarios':
            loadHorarios();
            break;
        case 'professores':
            loadProfessores();
            break;
        default:
            loadDashboard();
    }
}

function loadDashboard() {
    const content = document.getElementById('page-content');

    // Carrega estatísticas do localStorage
    const stats = getDashboardStats();

    content.innerHTML = `
        <div class="page">
            <h1 class="page-title">👋 Bem-vindo à Gestão IPSS</h1>
            <p class="page-subtitle">Use o menu lateral para navegar entre as secções.</p>

            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-label">👥 Utentes (Total)</div>
                    <span class="metric-value">${stats.utentes.total}</span>
                </div>
                <div class="metric-card">
                    <div class="metric-label">✅ Utentes Ativos</div>
                    <span class="metric-value">${stats.utentes.ativos}</span>
                </div>
                <div class="metric-card">
                    <div class="metric-label">❌ Utentes Inativos</div>
                    <span class="metric-value">${stats.utentes.inativos}</span>
                </div>
                <div class="metric-card">
                    <div class="metric-label">📚 Disciplinas</div>
                    <span class="metric-value">${stats.disciplinas}</span>
                </div>
                <div class="metric-card">
                    <div class="metric-label">🏫 Turmas</div>
                    <span class="metric-value">${stats.turmas}</span>
                </div>
                <div class="metric-card">
                    <div class="metric-label">👨‍🏫 Professores</div>
                    <span class="metric-value">${stats.professores}</span>
                </div>
            </div>
        </div>
    `;
}

// SISTEMA DE STORAGE LOCAL
function initializeStorage() {
    // Inicializa estruturas de dados se não existirem
    if (!localStorage.getItem('gestaoIPSS')) {
        const initialData = {
            utentes: [],
            professores: [],
            turmas: [],
            disciplinas: [],
            horarios: []
        };
        localStorage.setItem('gestaoIPSS', JSON.stringify(initialData));
    }
}

function getDashboardStats() {
    const data = JSON.parse(localStorage.getItem('gestaoIPSS') || '{}');

    const utentes = data.utentes || [];
    const totalUtentes = utentes.length;
    const utentesAtivos = utentes.filter(u => u.estado === 'Ativo').length;
    const utentesInativos = totalUtentes - utentesAtivos;

    return {
        utentes: {
            total: totalUtentes,
            ativos: utentesAtivos,
            inativos: utentesInativos
        },
        disciplinas: (data.disciplinas || []).length,
        turmas: (data.turmas || []).length,
        professores: (data.professores || []).length
    };
}

// Funções placeholder para outras páginas
function loadDisciplinas() { /* Implementação no Módulo 4 */ }
function loadUtentes() { /* Implementação no Módulo 5 */ }
function loadTurmas() { /* Implementação no Módulo 6 */ }
function loadHorarios() { /* Implementação no Módulo 7 */ }
function loadProfessores() { /* Implementação no Módulo 8 */ }

TESTE DO MÓDULO 1:
- Abra index.html no navegador
- Deve mostrar layout exato como no Streamlit
- Menu lateral funcional (não carrega páginas ainda)
- Dashboard básico com métricas zeradas

=============================================
MÓDULO 2: SISTEMA DE ARMAZENAMENTO LOCAL
=============================================

INSTRUÇÃO: Configure o sistema de storage offline (substitui Google Sheets).

1. CRIE data/models.js:
// Definições de dados idênticas às do Streamlit

const UserSchema = {
    id: null,
    nome: '',
    nif: '',
    dataNascimento: '',
    genero: '',
    telefone: '',
    email: '',
    endereco: '',
    estado: 'Ativo', // Ativo/Inativo
    tipoPessoa: '', // Menor/Maior
    notas: ''
};

const ProfessorSchema = {
    id: null,
    nomeCompleto: '',
    telefone: '',
    email: '',
    nib: '',
    valorHora: 0.0,
    observacoes: ''
};

const DisciplinaSchema = {
    id: null,
    nomeDisciplina: '',
    tipoDisciplina: '', // Teórica/Prática
};

const TurmaSchema = {
    id: null,
    nomeTurma: '',
    disciplina: '',
    professorId: null,
    dataInicio: '',
    dataFim: '',
    numeroVagas: 0,
    numeroInscritos: 0,
    estado: 'Ativa', // Ativa/Inativa
    observacoes: ''
};

// Validações idênticas às do Streamlit
function validateUser(user) {
    const errors = [];
    if (!user.nome || user.nome.trim().length === 0) {
        errors.push('Nome é obrigatório');
    }
    if (!user.nif || user.nif.trim().length === 0) {
        errors.push('NIF é obrigatório');
    }
    // Adicione mais validações conforme necessário
    return errors;
}

function validateProfessor(professor) {
    const errors = [];
    if (!professor.nomeCompleto || professor.nomeCompleto.trim().length === 0) {
        errors.push('Nome completo é obrigatório');
    }
    if (!professor.telefone || professor.telefone.trim().length === 0) {
        errors.push('Telefone é obrigatório');
    }
    return errors;
}

function validateDisciplina(disciplina) {
    const errors = [];
    if (!disciplina.nomeDisciplina || disciplina.nomeDisciplina.trim().length === 0) {
        errors.push('Nome da disciplina é obrigatório');
    }
    return errors;
}

function validateTurma(turma) {
    const errors = [];
    if (!turma.nomeTurma || turma.nomeTurma.trim().length === 0) {
        errors.push('Nome da turma é obrigatório');
    }
    if (!turma.disciplina || turma.disciplina.trim().length === 0) {
        errors.push('Disciplina é obrigatória');
    }
    return errors;
}

2. CRIE data/storage.js:
// Sistema de armazenamento local com API idêntica aos CRUD do Streamlit

class LocalStorageManager {
    constructor() {
        if (!localStorage.getItem('gestaoIPSS')) {
            const initialData = {
                utentes: [],
                professores: [],
                turmas: [],
                disciplinas: [],
                horarios: [],
                nextId: 1  // Controla geração de IDs sequenciais
            };
            localStorage.setItem('gestaoIPSS', JSON.stringify(initialData));
        }
    }

    getData() {
        return JSON.parse(localStorage.getItem('gestaoIPSS') || '{}');
    }

    saveData(data) {
        localStorage.setItem('gestaoIPSS', JSON.stringify(data));
    }

    generateNextId() {
        const data = this.getData();
        const nextId = data.nextId || 1;
        data.nextId = nextId + 1;
        this.saveData(data);
        return nextId;
    }

    // === API PARA UTENTES ===
    getUtentes(filters = {}) {
        const data = this.getData();
        let utentes = [...data.utentes];

        // Aplicação de filtros
        if (filters.nome) {
            utentes = utentes.filter(u =>
                u.nome.toLowerCase().includes(filters.nome.toLowerCase())
            );
        }
        if (filters.estado) {
            utentes = utentes.filter(u => u.estado === filters.estado);
        }

        return utentes;
    }

    createUtente(utenteData) {
        const data = this.getData();
        const newUtente = {
            ...UserSchema,
            ...utenteData,
            id: this.generateNextId()
        };

        // Validação
        const errors = validateUser(newUtente);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.utentes.push(newUtente);
        this.saveData(data);

        return newUtente;
    }

    updateUtente(id, updateData) {
        const data = this.getData();
        const index = data.utentes.findIndex(u => u.id === id);

        if (index === -1) {
            throw new Error('Utente não encontrado');
        }

        const updatedUtente = {
            ...data.utentes[index],
            ...updateData
        };

        // Validação
        const errors = validateUser(updatedUtente);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.utentes[index] = updatedUtente;
        this.saveData(data);

        return updatedUtente;
    }

    deleteUtente(id) {
        const data = this.getData();
        const index = data.utentes.findIndex(u => u.id === id);

        if (index === -1) {
            return false;
        }

        data.utentes.splice(index, 1);
        this.saveData(data);
        return true;
    }

    getUtenteById(id) {
        const data = this.getData();
        return data.utentes.find(u => u.id === id) || null;
    }

    // === API PARA PROFESSORES ===
    getProfessores(filters = {}) {
        const data = this.getData();
        let professores = [...data.professores];

        if (filters.nome) {
            professores = professores.filter(p =>
                p.nomeCompleto.toLowerCase().includes(filters.nome.toLowerCase())
            );
        }

        return professores;
    }

    createProfessor(professorData) {
        const data = this.getData();
        const newProfessor = {
            ...ProfessorSchema,
            ...professorData,
            id: this.generateNextId()
        };

        const errors = validateProfessor(newProfessor);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.professores.push(newProfessor);
        this.saveData(data);

        return newProfessor;
    }

    updateProfessor(id, updateData) {
        const data = this.getData();
        const index = data.professores.findIndex(p => p.id === id);

        if (index === -1) {
            throw new Error('Professor não encontrado');
        }

        const updatedProfessor = {
            ...data.professores[index],
            ...updateData
        };

        const errors = validateProfessor(updatedProfessor);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.professores[index] = updatedProfessor;
        this.saveData(data);

        return updatedProfessor;
    }

    deleteProfessor(id) {
        const data = this.getData();
        const index = data.professores.findIndex(p => p.id === id);

        if (index === -1) {
            return false;
        }

        data.professores.splice(index, 1);
        this.saveData(data);
        return true;
    }

    getProfessorById(id) {
        const data = this.getData();
        return data.professores.find(p => p.id === id) || null;
    }

    // === API PARA DISCIPLINAS ===
    getDisciplinas() {
        const data = this.getData();
        return [...data.disciplinas];
    }

    createDisciplina(disciplinaData) {
        const data = this.getData();
        const newDisciplina = {
            ...DisciplinaSchema,
            ...disciplinaData,
            id: this.generateNextId()
        };

        const errors = validateDisciplina(newDisciplina);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.disciplinas.push(newDisciplina);
        this.saveData(data);

        return newDisciplina;
    }

    updateDisciplina(id, updateData) {
        const data = this.getData();
        const index = data.disciplinas.findIndex(d => d.id === id);

        if (index === -1) {
            throw new Error('Disciplina não encontrada');
        }

        const updatedDisciplina = {
            ...data.disciplinas[index],
            ...updateData
        };

        const errors = validateDisciplina(updatedDisciplina);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.disciplinas[index] = updatedDisciplina;
        this.saveData(data);

        return updatedDisciplina;
    }

    deleteDisciplina(id) {
        const data = this.getData();
        const index = data.disciplinas.findIndex(d => d.id === id);

        if (index === -1) {
            return false;
        }

        data.disciplinas.splice(index, 1);
        this.saveData(data);
        return true;
    }

    // === API PARA TURMAS ===
    getTurmas(filters = {}) {
        const data = this.getData();
        return [...data.turmas];
    }

    createTurma(turmaData) {
        const data = this.getData();
        const newTurma = {
            ...TurmaSchema,
            ...turmaData,
            id: this.generateNextId()
        };

        const errors = validateTurma(newTurma);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.turmas.push(newTurma);
        this.saveData(data);

        return newTurma;
    }

    updateTurma(id, updateData) {
        const data = this.getData();
        const index = data.turmas.findIndex(t => t.id === id);

        if (index === -1) {
            throw new Error('Turma não encontrada');
        }

        const updatedTurma = {
            ...data.turmas[index],
            ...updateData
        };

        const errors = validateTurma(updatedTurma);
        if (errors.length > 0) {
            throw new Error(`Erro de validação: ${errors.join(', ')}`);
        }

        data.turmas[index] = updatedTurma;
        this.saveData(data);

        return updatedTurma;
    }

    deleteTurma(id) {
        const data = this.getData();
        const index = data.turmas.findIndex(t => t.id === id);

        if (index === -1) {
            return false;
        }

        data.turmas.splice(index, 1);
        this.saveData(data);
        return true;
    }

    // === ESTATÍSTICAS ===
    getStats() {
        const data = this.getData();

        const utentesAtivos = data.utentes.filter(u => u.estado === 'Ativo').length;
        const utentesInativos = data.utentes.filter(u => u.estado === 'Inativo').length;

        return {
            utentes: {
                total: data.utentes.length,
                ativos: utentesAtivos,
                inativos: utentesInativos
            },
            professores: data.professores.length,
            turmas: data.turmas.length,
            disciplinas: data.disciplinas.length
        };
    }
}

// Instância global do gerenciador
const storageManager = new LocalStorageManager();

3. ATUALIZE script.js PARA USAR O STORAGE:

// Inicialização atualizada
function loadDashboard() {
    const content = document.getElementById('page-content');

    // Carrega estatísticas reais do localStorage
    const stats = storageManager.getStats();

    content.innerHTML = `...`; // Mesmo conteúdo, agora com dados reais
}

TESTE DO MÓDULO 2:
- Os valores dos dashboard agora refletem dados reais salvo
- Criar/apagar itens persiste entre reloads da página
- Dados ficam salvos mesmo fechando o navegador

=============================================
MÓDULO 3: COMPONENTES DE INTERFACE REUTILIZÁVEIS
=============================================

INSTRUÇÃO: Crie componentes que replicam as funcionalidades do Streamlit.

1. CRIE modules/components.js:
// Componentes reutilizáveis que replicam o Streamlit

class UIComponents {
    static createButton(text, options = {}) {
        const button = document.createElement('button');
        button.textContent = text;
        button.className = 'custom-button';

        // Styled exatamente como no Streamlit
        const style = document.createElement('style');
        style.textContent = `
            .custom-button {
                background: linear-gradient(90deg, #e74c3c, #f39c12);
                color: white;
                border: none;
                border-radius: 12px;
                padding: 0.6rem 1.2rem;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.2s ease;
                box-shadow: 0 4px 10px rgba(240, 90, 20, 0.3);
            }
            .custom-button:hover {
                transform: translateY(-3px);
                box-shadow: 0 6px 15px rgba(240, 90, 20, 0.4);
            }
            .custom-button.primary {
                background: linear-gradient(90deg, #3498db, #2980b9);
            }
        `;
        document.head.appendChild(style);

        if (options.primary) button.classList.add('primary');
        if (options.onClick) button.onclick = options.onClick;

        return button;
    }

    static createInput(placeholder, options = {}) {
        const input = document.createElement('input');
        input.placeholder = placeholder;

        const style = document.createElement('style');
        style.textContent = `
            .custom-input {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #ddd;
                border-radius: 12px;
                padding: 10px;
                font-size: 16px;
                width: ${options.width || '100%'};
            }
            .custom-input:focus {
                border-color: #3498db;
                outline: none;
            }
        `;
        document.head.appendChild(style);

        input.className = 'custom-input';
        if (options.type) input.type = options.type;
        if (options.required) input.required = true;

        return input;
    }

    static createFormCard(title) {
        const card = document.createElement('div');
        card.className = 'form-card';
        card.innerHTML = `
            <div class="form-title">${title}</div>
            <div class="form-body"></div>
            <div class="form-actions"></div>
        `;

        const style = document.createElement('style');
        style.textContent = `
            .form-card {
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%) !important;
                border-radius: 12px;
                padding: 20px;
                margin: 20px 0;
                border: 1px solid #546e7a;
                box-shadow: 0 8px 32px rgba(52, 73, 94, 0.4) !important;
                color: white;
            }
            .form-title {
                font-size: 1.2em;
                font-weight: 600;
                margin-bottom: 20px;
            }
            .form-body {
                margin-bottom: 20px;
            }
            .form-actions {
                display: flex;
                gap: 10px;
                justify-content: flex-end;
            }
        `;
        document.head.appendChild(style);

        return card;
    }

    static createExpander(title, content, options = {}) {
        const expander = document.createElement('div');
        expander.className = 'expander';
        expander.setAttribute('data-testid', 'stExpander');

        const header = document.createElement('div');
        header.className = 'expander-header';
        header.setAttribute('data-testid', 'stExpanderHeader');
        header.textContent = title;

        const expanderContent = document.createElement('div');
        expanderContent.className = 'expander-content';
        expanderContent.setAttribute('data-testid', 'stExpanderContent');
        expanderContent.style.display = options.expanded ? 'block' : 'none';

        if (typeof content === 'string') {
            expanderContent.innerHTML = content;
        } else {
            expanderContent.appendChild(content);
        }

        expander.appendChild(header);
        expander.appendChild(expanderContent);

        const style = document.createElement('style');
        style.textContent = `
            .expander-header[data-testid="stExpanderHeader"] {
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%) !important;
                color: white !important;
                font-weight: 600 !important;
                padding: 12px 16px !important;
                border-radius: 12px !important;
                cursor: pointer !important;
                position: relative;
                transition: all 0.3s ease;
            }
            .expander-header:hover {
                background: linear-gradient(135deg, #5dade2 0%, #3498db 100%) !important;
            }
            .expander-content {
                background: rgba(255, 255, 255, 0.05) !important;
                color: white !important;
                padding: 16px !important;
                border-radius: 0 0 12px 12px !important;
                border: 1px solid #546e7a;
                border-top: none;
                display: none;
            }
            .expander[aria-expanded="true"] .expander-header {
                background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%) !important;
                border-radius: 12px 12px 0 0 !important;
            }
            .expander[aria-expanded="true"] .expander-content {
                display: block;
            }
        `;
        document.head.appendChild(style);

        // Toggle functionality
        header.addEventListener('click', function() {
            const isExpanded = expander.hasAttribute('aria-expanded');
            if (isExpanded) {
                expander.removeAttribute('aria-expanded');
            } else {
                expander.setAttribute('aria-expanded', 'true');
            }
        });

        return expander;
    }

    static createConfirmDialog(message, onConfirm, onCancel) {
        const dialog = document.createElement('div');
        dialog.className = 'confirm-dialog-overlay';
        dialog.innerHTML = `
            <div class="confirm-dialog">
                <p>${message}</p>
                <div class="dialog-actions">
                    <button class="btn-cancel">Cancelar</button>
                    <button class="btn-confirm">Confirmar</button>
                </div>
            </div>
        `;

        const style = document.createElement('style');
        style.textContent = `
            .confirm-dialog-overlay {
                position: fixed;
                top: 0; left: 0;
                width: 100%; height: 100%;
                background: rgba(0,0,0,0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1000;
            }
            .confirm-dialog {
                background: white;
                color: #2c3e50;
                padding: 20px;
                border-radius: 12px;
                max-width: 400px;
                text-align: center;
            }
            .dialog-actions {
                display: flex;
                gap: 10px;
                margin-top: 20px;
                justify-content: center;
            }
            .btn-confirm {
                background: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                cursor: pointer;
            }
            .btn-cancel {
                background: #95a5a6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                cursor: pointer;
            }
        `;
        document.head.appendChild(style);

        const btnConfirm = dialog.querySelector('.btn-confirm');
        const btnCancel = dialog.querySelector('.btn-cancel');

        btnConfirm.addEventListener('click', function() {
            document.body.removeChild(dialog);
            if (onConfirm) onConfirm();
        });

        btnCancel.addEventListener('click', function() {
            document.body.removeChild(dialog);
            if (onCancel) onCancel();
        });

        return dialog;
    }
}

2. ATUALIZE script.js PARA USAR OS COMPONENTES:

// Sistema de navegação com componentes
document.addEventListener('DOMContentLoaded', function() {
    setupNavigation();
    loadDashboard();
});

function setupNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');

    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();

            navLinks.forEach(l => l.classList.remove('active'));
            this.classList.add('active');

            const pageName = this.getAttribute('data-page');
            loadPage(pageName);
        });
    });
}

function loadPage(pageName) {
    const content = document.getElementById('page-content');

    switch(pageName) {
        case 'inicio':
            loadDashboard();
            break;
        case 'disciplinas':
            loadDisciplinas();
            break;
        default:
            loadDashboard();
    }
}

TESTE DO MÓDULO 3:
- Cria diferentes tipos de botões
- Forms estilizados como no Streamlit
- Expanders funcionais idênticos aos do Streamlit

=============================================
MÓDULO 4: MÓDULO DE DISCIPLINAS
=============================================

INSTRUÇÃO: Construa o módulo de gestão de disciplinas.

1. CRIE modules/disciplinas.js:
// Módulo completo de gestão de disciplinas

function loadDisciplinas() {
    const content = document.getElementById('page-content');

    content.innerHTML = `
        <div class="page">
            <h1 class="page-title">📚 Gestão de Disciplinas</h1>

            <div class="section-tabs">
                <button class="tab-btn active" onclick="showDisciplinasTab('adicionar')">➕ Adicionar Disciplina</button>
                <button class="tab-btn" onclick="showDisciplinasTab('gerir')">📋 Gerir Disciplinas</button>
            </div>

            <div id="disciplinas-form-section" class="form-section active">
                ${createDisciplinaForm()}
            </div>

            <div id="disciplinas-list-section" class="list-section">
                ${renderDisciplinasList()}
            </div>
        </div>
    `;

    // Independente do jQuery
    const tabs = content.querySelectorAll('.tab-btn');
    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            showDisciplinasTab(this.onclick.toString().match(/'(\w+)'/)[1]);
        });
    });
}

function showDisciplinasTab(tabName) {
    // Remove active de todas as tabs
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.section').forEach(section => section.classList.remove('active'));

    // Adiciona active à tab selecionada
    document.querySelector(`.tab-btn[onclick*="showDisciplinasTab('${tabName}')"`).classList.add('active');

    if (tabName === 'adicionar') {
        document.getElementById('disciplinas-form-section').classList.add('active');
    } else if (tabName === 'gerir') {
        document.getElementById('disciplinas-list-section').classList.add('active');
    }
}

function createDisciplinaForm() {
    const formCard = UIComponents.createFormCard('Adicionar nova disciplina');

    // Campos do formulário
    const nomeInput = UIComponents.createInput('Nome da Disciplina', {required: true});
    nomeInput.id = 'disciplina-nome';

    const tipoSelect = document.createElement('select');
    tipoSelect.className = 'custom-select';
    tipoSelect.innerHTML = `
        <option value="">Selecionar Tipo</option>
        <option value="Teórica">Teórica</option>
        <option value="Prática">Prática</option>
        <option value="Teórico-Prática">Teórico-Prática</option>
    `;
    tipoSelect.id = 'disciplina-tipo';

    const observacoesInput = document.createElement('textarea');
    observacoesInput.className = 'custom-textarea';
    observacoesInput.placeholder = 'Observações (opcional)';
    observacoesInput.id = 'disciplina-observacoes';

    const salvarBtn = UIComponents.createButton('✅ Salvar Disciplina', {
        primary: true,
        onClick: salvarDisciplina
    });

    const limparBtn = UIComponents.createButton('🗑️ Limpar Formulário', {
        onClick: limparFormDisciplina
    });

    // Adiciona estilos
    const style = document.createElement('style');
    style.textContent = `
        .custom-select {
            background-color: white;
            color: #2c3e50;
            border: 1px solid #ddd;
            border-radius: 12px;
            padding: 10px;
            font-size: 16px;
            width: 100%;
            margin-bottom: 15px;
        }
        .custom-textarea {
            background-color: white;
            color: #2c3e50;
            border: 1px solid #ddd;
            border-radius: 12px;
            padding: 10px;
            font-family: inherit;
            font-size: 16px;
            width: 100%;
            height: 80px;
            margin-bottom: 15px;
            resize: vertical;
        }
        .section-tabs {
            display: flex;
            margin-bottom: 20px;
            border-radius: 12px;
            overflow: hidden;
        }
        .tab-btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .tab-btn.active {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        }
        .form-section, .list-section {
            display: none;
        }
        .form-section.active, .list-section.active {
            display: block;
        }
    `;
    document.head.appendChild(style);

    // Adiciona campos ao formulário
    formCard.querySelector('.form-body').innerHTML = `
        <div style="margin-bottom: 15px;">
            <label style="color: white; font-weight: 600; margin-bottom: 5px; display: block;">📚 Nome da Disciplina *</label>
        </div>
        <div style="margin-bottom: 15px;">
            <label style="color: white; font-weight: 600; margin-bottom: 5px; display: block;">📖 Tipo de Disciplina *</label>
        </div>
        <div style="margin-bottom: 15px;">
            <label style="color: white; font-weight: 600; margin-bottom: 5px; display: block;">📝 Observações</label>
        </div>
    `;

    const formBody = formCard.querySelector('.form-body');
    const [nameLabel, typeLabel, obsLabel] = formBody.querySelectorAll('label');

    formBody.insertBefore(nomeInput, typeLabel);
    formBody.insertBefore(tipoSelect, obsLabel);
    formBody.insertBefore(observacoesInput, obsLabel.nextSibling);

    // Adiciona botões
    const actionsDiv = formCard.querySelector('.form-actions');
    actionsDiv.appendChild(salvarBtn);
    actionsDiv.appendChild(limparBtn);

    return formCard.outerHTML;
}

function salvarDisciplina() {
    const nome = document.getElementById('disciplina-nome').value.trim();
    const tipo = document.getElementById('disciplina-tipo').value;
    const observacoes = document.getElementById('disciplina-observacoes').value.trim();

    if (!nome) {
        alert('Nome da disciplina é obrigatório');
        return;
    }

    if (!tipo) {
        alert('Tipo de disciplina é obrigatório');
        return;
    }

    try {
        storageManager.createDisciplina({
            nomeDisciplina: nome,
            tipoDisciplina: tipo,
            observacoes: observacoes
        });

        alert('Disciplina criada com sucesso!');
        limparFormDisciplina();
        // Atualiza lista se estiver visível
        if (document.getElementById('disciplinas-list-section').classList.contains('active')) {
            updateDisciplinasList();
        }

    } catch (error) {
        alert('Erro ao salvar disciplina: ' + error.message);
    }
}

function limparFormDisciplina() {
    document.getElementById('disciplina-nome').value = '';
    document.getElementById('disciplina-tipo').value = '';
    document.getElementById('disciplina-observacoes').value = '';
}

function renderDisciplinasList() {
    const disciplinas = storageManager.getDisciplinas();
    const searchInput = UIComponents.createInput('🔍 Pesquisar disciplina...');
    searchInput.id = 'disciplina-search';

    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const cardsContainer = document.getElementById('disciplinas-cards-container');

        if (searchTerm) {
            cardsContainer.innerHTML = disciplinas
                .filter(d => d.nomeDisciplina.toLowerCase().includes(searchTerm))
                .map(renderDisciplinaCard).join('');
        } else {
            cardsContainer.innerHTML = disciplinas.map(renderDisciplinaCard).join('');
        }
    });

    const container = document.createElement('div');
    container.innerHTML = `
        <div class="list-header" style="margin-bottom: 20px;"></div>
        <div class="metric-info" style="margin-bottom: 20px;">
            <span style="color: white;">📊 Mostrando ${disciplinas.length} disciplina(s)</
